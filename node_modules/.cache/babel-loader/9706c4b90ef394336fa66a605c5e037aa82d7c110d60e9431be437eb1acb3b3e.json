{"ast":null,"code":"var _jsxFileName = \"/workspaces/SI-579-Final-Project/src/CardList.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DeckDisplay = ({\n  deck\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n    children: \"Deck\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: deck.map((imageUrl, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imageUrl,\n        alt: `Card ${index + 1}`,\n        style: {\n          width: '100px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 3\n}, this);\n_c = DeckDisplay;\nconst CardList = ({\n  cards\n}) => {\n  _s();\n  const [deck, setDeck] = useState([]);\n  const addToDeck = card => {\n    if (card.imageUrl) {\n      const updatedDeck = [...deck, card.imageUrl];\n      setDeck(updatedDeck);\n      localStorage.setItem('deck', JSON.stringify(updatedDeck));\n    }\n  };\n  const uniqueCardsMap = new Map();\n  cards.forEach(card => {\n    if (!uniqueCardsMap.has(card.name)) {\n      uniqueCardsMap.set(card.name, card);\n    }\n  });\n  const uniqueCards = Array.from(uniqueCardsMap.values());\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Search Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: uniqueCards.map(card => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Name:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 19\n              }, this), \" \", card.name, \" | \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Artist:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 56\n              }, this), ' ', card.artist, \" | \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Set:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 47,\n                columnNumber: 35\n              }, this), \" \", card.set, \" |\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Color:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 19\n              }, this), \" \", card.colors ? card.colors.join(', ') : 'N/A']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 17\n            }, this), card.imageUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: card.imageUrl,\n              alt: card.name,\n              style: {\n                width: '100px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => addToDeck(card),\n              children: \"Add to Deck\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 17\n            }, this)]\n          }, card.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(DeckDisplay, {\n          deck: deck\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(CardList, \"h85ghwWFuAZ0QkT43K1tI9U/CM0=\");\n_c2 = CardList;\nexport default CardList;\nvar _c, _c2;\n$RefreshReg$(_c, \"DeckDisplay\");\n$RefreshReg$(_c2, \"CardList\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DeckDisplay","deck","children","fileName","_jsxFileName","lineNumber","columnNumber","map","imageUrl","index","src","alt","style","width","_c","CardList","cards","_s","setDeck","addToDeck","card","updatedDeck","localStorage","setItem","JSON","stringify","uniqueCardsMap","Map","forEach","has","name","set","uniqueCards","Array","from","values","display","flex","artist","colors","join","onClick","id","_c2","$RefreshReg$"],"sources":["/workspaces/SI-579-Final-Project/src/CardList.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst DeckDisplay = ({ deck }) => (\n  <div>\n    <h3>Deck</h3>\n    <ul>\n      {deck.map((imageUrl, index) => (\n        <li key={index}>\n          <img src={imageUrl} alt={`Card ${index + 1}`} style={{ width: '100px' }} />\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nconst CardList = ({ cards }) => {\n  const [deck, setDeck] = useState([]);\n\n  const addToDeck = (card) => {\n    if (card.imageUrl) {\n      const updatedDeck = [...deck, card.imageUrl];\n      setDeck(updatedDeck);\n      localStorage.setItem('deck', JSON.stringify(updatedDeck));\n    }\n  };\n\n  const uniqueCardsMap = new Map();\n\n  cards.forEach((card) => {\n    if (!uniqueCardsMap.has(card.name)) {\n      uniqueCardsMap.set(card.name, card);\n    }\n  });\n\n  const uniqueCards = Array.from(uniqueCardsMap.values());\n\n  return (\n    <div>\n      <h2>Search Results</h2>\n      <div style={{ display: 'flex' }}>\n        <div style={{ flex: 1 }}>\n          <ul>\n            {uniqueCards.map((card) => (\n              <li key={card.id}>\n                <div>\n                  <strong>Name:</strong> {card.name} | <strong>Artist:</strong>{' '}\n                  {card.artist} | <strong>Set:</strong> {card.set} |{' '}\n                  <strong>Color:</strong> {card.colors ? card.colors.join(', ') : 'N/A'}\n                </div>\n                {card.imageUrl && (\n                  <img src={card.imageUrl} alt={card.name} style={{ width: '100px' }} />\n                )}\n                <button onClick={() => addToDeck(card)}>Add to Deck</button>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div style={{ flex: 1 }}>\n          <DeckDisplay deck={deck} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CardList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}