{"ast":null,"code":"var _jsxFileName = \"/workspaces/SI-579-Final-Project/src/CardList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport SearchBar from './SearchBar';\nimport CardList from './CardList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterType, setFilterType] = useState('name');\n  const [filteredCards, setFilteredCards] = useState([]);\n  const [deck, setDeck] = useState([]);\n\n  // Function to handle search and update state\n  const handleSearch = (term, type) => {\n    setSearchTerm(term);\n    setFilterType(type);\n  };\n\n  // Effect hook to fetch cards based on search term and filter type\n  useEffect(() => {\n    const fetchCards = async () => {\n      try {\n        let url = 'https://api.magicthegathering.io/v1/cards?';\n        if (searchTerm) {\n          url += `${filterType}=${searchTerm}&`;\n        }\n        const response = await fetch(url);\n        const data = await response.json();\n\n        // Extract the array of cards from the response and update the state\n        const searchResults = data.cards || [];\n        setFilteredCards(searchResults);\n      } catch (error) {\n        console.error('Error fetching cards:', error);\n      }\n    };\n    fetchCards();\n  }, [searchTerm, filterType]);\n\n  // Effect hook to load deck from localStorage on component mount\n  useEffect(() => {\n    const storedDeck = localStorage.getItem('deck');\n    if (storedDeck) {\n      setDeck(JSON.parse(storedDeck));\n    }\n  }, []);\n\n  // Effect hook to update localStorage when deck changes\n  useEffect(() => {\n    localStorage.setItem('deck', JSON.stringify(deck));\n  }, [deck]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Magic: The Gathering Card Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: handleSearch,\n      placeholder: \"Search by name, artist, set, or color\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardList, {\n      cards: filteredCards\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DeckDisplay, {\n      deck: deck\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"OxItnaBpq87TkojMUC8Hf74XlvY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SearchBar","CardList","jsxDEV","_jsxDEV","App","_s","searchTerm","setSearchTerm","filterType","setFilterType","filteredCards","setFilteredCards","deck","setDeck","handleSearch","term","type","fetchCards","url","response","fetch","data","json","searchResults","cards","error","console","storedDeck","localStorage","getItem","JSON","parse","setItem","stringify","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","placeholder","DeckDisplay","_c","$RefreshReg$"],"sources":["/workspaces/SI-579-Final-Project/src/CardList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport SearchBar from './SearchBar';\nimport CardList from './CardList';\n\nconst App = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterType, setFilterType] = useState('name');\n  const [filteredCards, setFilteredCards] = useState([]);\n  const [deck, setDeck] = useState([]);\n\n  // Function to handle search and update state\n  const handleSearch = (term, type) => {\n    setSearchTerm(term);\n    setFilterType(type);\n  };\n\n  // Effect hook to fetch cards based on search term and filter type\n  useEffect(() => {\n    const fetchCards = async () => {\n      try {\n        let url = 'https://api.magicthegathering.io/v1/cards?';\n\n        if (searchTerm) {\n          url += `${filterType}=${searchTerm}&`;\n        }\n\n        const response = await fetch(url);\n        const data = await response.json();\n\n        // Extract the array of cards from the response and update the state\n        const searchResults = data.cards || [];\n        setFilteredCards(searchResults);\n      } catch (error) {\n        console.error('Error fetching cards:', error);\n      }\n    };\n\n    fetchCards();\n  }, [searchTerm, filterType]);\n\n  // Effect hook to load deck from localStorage on component mount\n  useEffect(() => {\n    const storedDeck = localStorage.getItem('deck');\n    if (storedDeck) {\n      setDeck(JSON.parse(storedDeck));\n    }\n  }, []);\n\n  // Effect hook to update localStorage when deck changes\n  useEffect(() => {\n    localStorage.setItem('deck', JSON.stringify(deck));\n  }, [deck]);\n\n  return (\n    <div>\n      <h1>Magic: The Gathering Card Search</h1>\n      <SearchBar onSearch={handleSearch} placeholder=\"Search by name, artist, set, or color\" />\n      <CardList cards={filteredCards} />\n      {/* Render DeckDisplay component with the deck state */}\n      <DeckDisplay deck={deck} />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}