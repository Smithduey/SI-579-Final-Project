{"ast":null,"code":"var _jsxFileName = \"/workspaces/SI-579-Final-Project/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport SearchBar from './SearchBar';\nimport CardList from './CardList';\nimport DeckDisplay from './DeckDisplay'; // Import the DeckDisplay component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterType, setFilterType] = useState('name');\n  const [filteredCards, setFilteredCards] = useState([]);\n  const [deck, setDeck] = useState([]);\n\n  // Function to handle search and update state\n  const handleSearch = (term, type) => {\n    setSearchTerm(term);\n    setFilterType(type);\n  };\n\n  // Effect hook to fetch cards based on search term and filter type\n  useEffect(() => {\n    const fetchCards = async () => {\n      try {\n        const response = await fetch(`https://api.magicthegathering.io/v1/cards?${filterType}=${searchTerm}`);\n        const data = await response.json();\n        // Extract the array of cards from the response and update the state\n        const searchResults = data.cards || [];\n        setFilteredCards(searchResults);\n      } catch (error) {\n        console.error('Error fetching cards:', error);\n      }\n    };\n    fetchCards();\n  }, [searchTerm, filterType]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Magic: The Gathering Card Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n        onSearch: handleSearch,\n        placeholder: \"Search by name, artist, set, or color\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardList, {\n        cards: filteredCards,\n        addToDeck: setDeck\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(DeckDisplay, {\n        deck: deck\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"0WPHBUJH3W9IAqbP74dI1hHryDg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SearchBar","CardList","DeckDisplay","jsxDEV","_jsxDEV","App","_s","searchTerm","setSearchTerm","filterType","setFilterType","filteredCards","setFilteredCards","deck","setDeck","handleSearch","term","type","fetchCards","response","fetch","data","json","searchResults","cards","error","console","style","display","children","flex","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","placeholder","addToDeck","_c","$RefreshReg$"],"sources":["/workspaces/SI-579-Final-Project/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport SearchBar from './SearchBar';\nimport CardList from './CardList';\nimport DeckDisplay from './DeckDisplay'; // Import the DeckDisplay component\n\nconst App = () => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterType, setFilterType] = useState('name');\n  const [filteredCards, setFilteredCards] = useState([]);\n  const [deck, setDeck] = useState([]);\n\n  // Function to handle search and update state\n  const handleSearch = (term, type) => {\n    setSearchTerm(term);\n    setFilterType(type);\n  };\n\n  // Effect hook to fetch cards based on search term and filter type\n  useEffect(() => {\n    const fetchCards = async () => {\n      try {\n        const response = await fetch(\n          `https://api.magicthegathering.io/v1/cards?${filterType}=${searchTerm}`\n        );\n        const data = await response.json();\n        // Extract the array of cards from the response and update the state\n        const searchResults = data.cards || [];\n        setFilteredCards(searchResults);\n      } catch (error) {\n        console.error('Error fetching cards:', error);\n      }\n    };\n\n    fetchCards();\n  }, [searchTerm, filterType]);\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <div style={{ flex: 1 }}>\n        <h1>Magic: The Gathering Card Search</h1>\n        <SearchBar onSearch={handleSearch} placeholder=\"Search by name, artist, set, or color\" />\n        <CardList cards={filteredCards} addToDeck={setDeck} />\n      </div>\n      <div style={{ flex: 1 }}>\n        <DeckDisplay deck={deck} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}